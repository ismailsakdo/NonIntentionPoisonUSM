# -*- coding: utf-8 -*-
"""PoisonWithFigureProjection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1t7XtlPyBCWX6JFpaX6ac8oDKAWFXEBV8
"""

import pandas as pd
import numpy as np
from scipy.stats import spearmanr, linregress, f
import matplotlib.pyplot as plt
import seaborn as sns
import os

# Set professional plotting style
sns.set_style("whitegrid")
plt.rcParams['font.family'] = 'Arial'
plt.rcParams['axes.labelweight'] = 'bold'
plt.rcParams['figure.titlesize'] = 14
plt.rcParams['axes.titlesize'] = 12

# ==============================================================================
# 1. DATA DEFINITION (Historical Data 2006-2021)
# ==============================================================================

data = {
    'Year': np.arange(2006, 2022),
    'Population': [
        26417909, 26998389, 27570059, 28124778, 28655776, 29162039,
        29662831, 30174265, 30696137, 31232798, 31789685, 32355644,
        32910967, 33440596, 33700000, 34000000
    ],
    'NPC_Suicidal_Total': [
        567, 702, 745, 778, 926, 948, 1009, 1114, 1123, 1263, 1146,
        1190, 1200, 1332, 1450, 1586
    ],
    'SMR_Overall': [
        4.3, 4.7, 4.9, 5.2, 5.3, 5.5, 5.8, 6.0, 6.1, 6.2, 6.3, 6.4, 6.5, 6.6,
        np.nan, np.nan
    ],
    'SMR_Male': [
        6.5, 7.1, 7.5, 7.9, 8.1, 8.5, 9.1, 9.4, 9.6, 9.8, 10.0, 10.2, 10.4, 10.6,
        np.nan, np.nan
    ],
    'SMR_Female': [
        2.0, 2.3, 2.3, 2.5, 2.5, 2.5, 2.6, 2.7, 2.7, 2.7, 2.8, 2.8, 2.8, 2.9,
        np.nan, np.nan
    ],
    'DOSM_Fatalities': [
        np.nan] * 13 + [609, 631, 1142]
}

df_hist = pd.DataFrame(data)

# ==============================================================================
# 2. NPC CASE FORECASTING (2022-2024)
# ==============================================================================
X_fit_case = df_hist['Year']
y_fit_case = df_hist['NPC_Suicidal_Total']

# Fit linear model for case count trend
slope_case, intercept_case, _, _, _ = linregress(X_fit_case, y_fit_case)

# Predict future NPC cases
future_years = np.arange(2022, 2025)
future_predictions = slope_case * future_years + intercept_case
future_predictions_rounded = np.round(future_predictions).astype(int)

# Create future DataFrame with estimated population
df_future = pd.DataFrame({
    'Year': future_years,
    'Population': [34300000, 34600000, 34900000], # Estimated population
    'NPC_Suicidal_Total': future_predictions_rounded,
    'SMR_Overall': [np.nan] * 3, 'SMR_Male': [np.nan] * 3, 'SMR_Female': [np.nan] * 3,
    'DOSM_Fatalities': [np.nan] * 3,
})

# Combine historical (df_hist) and projected (df_future) data
df = pd.concat([df_hist, df_future], ignore_index=True)

# Calculate NPC_AIR on the full DataFrame (df - now 2006-2024)
df['NPC_AIR'] = (df['NPC_Suicidal_Total'] / df['Population']) * 100000

# --- Define the correlation period (2006-2019) from the combined DF ---
df_corr = df.iloc[:14].copy()
df_hist_full = df.iloc[:16].copy() # Data up to 2021

# ==============================================================================
# 3. AGE GROUP PROPORTIONAL ESTIMATION (For correlation testing)
# ==============================================================================
df_corr['NPC_20_74_YRS'] = (df_corr['NPC_Suicidal_Total'] * 0.634).round(0).astype(int)
df_corr['NPC_15_19_YRS'] = (df_corr['NPC_Suicidal_Total'] * 0.228).round(0).astype(int)

# ==============================================================================
# 4. CORRELATION ANALYSIS (Spearman's Rho)
# ==============================================================================
correlation_results = {}
corr_pairs = {
    'NPC AIR vs. SMR (Both Sexes)': (df_corr['NPC_AIR'], df_corr['SMR_Overall']),
    'NPC AIR vs. SMR (Male Trend)': (df_corr['NPC_AIR'], df_corr['SMR_Male']),
    'NPC AIR vs. SMR (Female Trend)': (df_corr['NPC_AIR'], df_corr['SMR_Female']),
    'NPC 20-74 YRS vs. SMR (Overall)': (df_corr['NPC_20_74_YRS'], df_corr['SMR_Overall']),
    'NPC 15-19 YRS vs. SMR (Overall)': (df_corr['NPC_15_19_YRS'], df_corr['SMR_Overall'])
}

for name, (data1, data2) in corr_pairs.items():
    rho, p_value = spearmanr(data1, data2)

    # Determine interpretation based on rho magnitude
    if p_value <= 0.05:
        if abs(rho) >= 0.8: interpretation = 'Very Strong Positive Correlation'
        elif abs(rho) >= 0.6: interpretation = 'Strong Positive Correlation'
        elif abs(rho) >= 0.4: interpretation = 'Moderate Positive Correlation'
        else: interpretation = 'Weak Positive/Negative Correlation'
    else:
        interpretation = 'No Significant Correlation'

    correlation_results[name] = {
        'rho': rho,
        'p_value': p_value,
        'Interpretation': interpretation
    }

df_corr_results = pd.DataFrame.from_dict(correlation_results, orient='index').reset_index().rename(columns={'index': 'Correlation Pair'})
df_corr_results['Spearman_rho'] = df_corr_results['rho'].round(4)
df_corr_results['P_value'] = df_corr_results['p_value'].round(4)
rho_overall = df_corr_results.loc[df_corr_results['Correlation Pair'] == 'NPC AIR vs. SMR (Both Sexes)', 'Spearman_rho'].values[0]


# ==============================================================================
# 5. SIMPLE LINEAR REGRESSION (SLR) AND SMR FORECAST (2024)
# ==============================================================================
X_slr = df_corr['NPC_AIR']
y_slr = df_corr['SMR_Overall']

# Perform Linear Regression on historical data (2006-2019)
slope_slr, intercept_slr, r_value_slr, _, _ = linregress(X_slr, y_slr)
R_squared = r_value_slr**2

# Get the forecasted NPC AIR for 2024 (from the combined DF)
NPC_AIR_2024_val = df['NPC_AIR'].iloc[-1].round(2)

# Calculate the SMR forecast using the validated SLR model
smr_forecast_2024 = slope_slr * NPC_AIR_2024_val + intercept_slr

# Store results for printing
SMR_forecast_val = smr_forecast_2024.round(2)
R2_val = R_squared.round(3)
Slope_val = slope_slr.round(3)
Intercept_val = intercept_slr.round(3)

# Calculate F-statistic and P-value for the SLR model
n = len(X_slr)
df_numerator = 1
df_denominator = n - 2
F_statistic = (R_squared / df_numerator) / ((1 - R_squared) / df_denominator)
p_value_slr_manual = 1 - f.cdf(F_statistic, df_numerator, df_denominator)


# ==============================================================================
# 6. PANDEMIC SPIKE COMPARISON (Table 4)
# ==============================================================================
df_pandemic = df_hist[df_hist['Year'].isin([2019, 2020, 2021])].copy()
df_pandemic['Annual Change NPC (YoY)'] = df_pandemic['NPC_Suicidal_Total'].pct_change() * 100
df_pandemic['Annual Change DOSM (YoY)'] = df_pandemic['DOSM_Fatalities'].pct_change() * 100

npc_2019 = df_pandemic.loc[df_pandemic['Year'] == 2019, 'NPC_Suicidal_Total'].values[0]
npc_2021 = df_pandemic.loc[df_pandemic['Year'] == 2021, 'NPC_Suicidal_Total'].values[0]
dosm_2019 = df_pandemic.loc[df_pandemic['Year'] == 2019, 'DOSM_Fatalities'].values[0]
dosm_2021 = df_pandemic.loc[df_pandemic['Year'] == 2021, 'DOSM_Fatalities'].values[0]

total_change_npc = ((npc_2021 - npc_2019) / npc_2019) * 100
total_change_dosm = ((dosm_2021 - dosm_2019) / dosm_2019) * 100

df_pandemic_display = df_pandemic[['Year', 'NPC_Suicidal_Total', 'Annual Change NPC (YoY)', 'DOSM_Fatalities', 'Annual Change DOSM (YoY)']].copy()
df_pandemic_display['Annual Change NPC (YoY)'] = df_pandemic_display['Annual Change NPC (YoY)'].apply(lambda x: f'+{x:.1f}%' if pd.notna(x) else 'N/A')
df_pandemic_display['Annual Change DOSM (YoY)'] = df_pandemic_display['Annual Change DOSM (YoY)'].apply(lambda x: f'+{x:.1f}%' if pd.notna(x) else 'N/A')
df_pandemic_display = df_pandemic_display.rename(columns={
    'NPC_Suicidal_Total': 'NPC Cases (Attempts)',
    'DOSM_Fatalities': 'DOSM Fatalities (Deaths)'
})

# ==============================================================================
# 7. GENERATE AND SAVE FIGURES (CLEANED FIGURE 1)
# ==============================================================================

# Figure 1: Time Series Comparison (NPC AIR vs SMR)
fig1, ax1 = plt.subplots(figsize=(10, 6))
fig1.suptitle('Figure 1. Time Series Comparison: Non-Fatal Incidents (NPC AIR) vs. Suicide Mortality Rate (SMR)', y=1.02, fontsize=14, fontweight='bold')

# --- Plot 1: NPC AIR (Left Y-axis) ---
color_npc = '#1f77b4'  # Blue
# Historical data (up to 2021)
line_npc_hist, = ax1.plot('Year', 'NPC_AIR', data=df_hist_full, color=color_npc, linewidth=2, marker='o', label='NPC AIR (2006-2021)')

# Projected data (connecting 2021 to 2024)
df_proj = df[df['Year'] >= 2021]
line_npc_proj, = ax1.plot('Year', 'NPC_AIR', data=df_proj, color=color_npc, linewidth=2, linestyle=':', marker='o', label='NPC AIR Projected (2022-2024)')

ax1.set_xlabel('Year')
ax1.set_ylabel('NPC Annual Incidence Rate (AIR) per 100,000 Population', color=color_npc, fontsize=10)
ax1.tick_params(axis='y', labelcolor=color_npc)
ax1.grid(True, which='both', axis='y', linestyle='--', linewidth=0.5, alpha=0.7)


# --- Create the second axis (ax2) for SMR ---
ax2 = ax1.twinx()
color_smr = '#d62728'  # Red
# Plotting SMR Overall (historical trend 2006-2019)
line_smr_hist, = ax2.plot('Year', 'SMR_Overall', data=df_corr, color=color_smr, linestyle='--', linewidth=2, marker='s', label='SMR Overall (2006-2019)')
# Add forecast point for 2024 SMR
scatter_smr_forecast = ax2.scatter(df['Year'].iloc[-1], SMR_forecast_val, color='green', marker='D', s=100, zorder=5, label=f'2024 Forecasted SMR: {SMR_forecast_val:.2f}')
ax2.set_ylabel('Age-Standardized Mortality Rate (SMR) per 100,000 Population', color=color_smr, fontsize=10)
ax2.tick_params(axis='y', labelcolor=color_smr)

# --- SINGLE, COMBINED LEGEND ---
# Get handles and labels manually
combined_handles = [line_npc_hist, line_npc_proj, line_smr_hist, scatter_smr_forecast]
combined_labels = [
    'NPC AIR (2006-2021)',
    'NPC AIR Projected (2022-2024)',
    'SMR Overall (2006-2019)',
    f'2024 Forecasted SMR: {SMR_forecast_val:.2f}'
]
ax1.legend(combined_handles, combined_labels, loc='upper left', frameon=True)

# Set X-axis ticks to show every two years clearly for a clean look
ax1.set_xticks(np.arange(2006, 2025, 2))
plt.tight_layout(rect=[0, 0, 1, 0.98])

# Save figure (file created)
fig1.savefig('Figure_1_Time_Series_Comparison.png', dpi=300)
plt.show()


# Figure 2: Simple Linear Regression (SLR) Plot
fig2, ax_slr = plt.subplots(figsize=(8, 6))

# Scatter plot of historical data points (2006-2019)
sns.scatterplot(x=X_slr, y=y_slr, ax=ax_slr, color='#1f77b4', s=80, label='Historical Data Points (2006-2019)')

# Add the regression line
X_line = np.linspace(X_slr.min() - 0.1, NPC_AIR_2024_val + 0.1, 100)
y_line = Slope_val * X_line + Intercept_val
ax_slr.plot(X_line, y_line, color='red', linestyle='-', label=f'SLR Fit (R²={R2_val:.3f})')

# Add the 2024 forecast point
ax_slr.scatter(NPC_AIR_2024_val, SMR_forecast_val, color='green', marker='*', s=200, zorder=5, label=f'2024 Forecast (SMR: {SMR_forecast_val:.2f})')

ax_slr.set_title('Figure 2. Simple Linear Regression: NPC AIR vs. SMR (2006-2019)', fontweight='bold')
ax_slr.set_xlabel('NPC Suicidal Annual Incidence Rate (AIR)')
ax_slr.set_ylabel('Age-Standardized Suicide Mortality Rate (SMR)')
ax_slr.legend(loc='lower right', frameon=True)
ax_slr.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)

plt.tight_layout()
# Save figure (file created)
fig2.savefig('Figure_2_SLR_Plot.png', dpi=300)
plt.show()


# ==============================================================================
# 8. PRINT FINAL RESULTS (COMPLETE REPORT)
# ==============================================================================
print("\n" + "="*80)
print("             COMPLETE STATISTICAL ANALYSIS REPORT (2006-2024)")
print("="*80)

# --- NEW: SLR and Forecast Results ---
print("\n--- NEW ANALYSIS: Simple Linear Regression & SMR Forecast ---")
print(f"SLR Model (2006-2019): SMR = {Slope_val} * NPC AIR + {Intercept_val}")
print(f"Coefficient of Determination (R²): {R2_val:.3f}")
print(f"F-statistic: {F_statistic:.2f} (P-value: {p_value_slr_manual:.4f})")
print(f"Model Significance: {'Highly Significant' if p_value_slr_manual < 0.001 else 'Significant' if p_value_slr_manual < 0.05 else 'Not Significant'}")

print("\n--- 2024 FORECAST ---")
print(f"Projected NPC AIR for 2024: {NPC_AIR_2024_val:.2f} per 100,000")
print(f"Forecasted Age-Standardized SMR for 2024: {SMR_forecast_val:.2f} per 100,000")

# --- Original Tables Output ---
print("\n--- TABLE 1: NPC Suicidal Cases Annual Incidence Rate (2006–2019) ---")
df_air_display = df_corr[['Year', 'Population', 'NPC_Suicidal_Total', 'NPC_AIR']].copy()
df_air_display.columns = ['Year', 'Population', 'NPC Suicidal Count', 'NPC Suicidal AIR (per 100k)']
df_air_display['Population'] = df_air_display['Population'].apply(lambda x: f'{x:,.0f}')
df_air_display['NPC Suicidal AIR (per 100k)'] = df_air_display['NPC Suicidal AIR (per 100k)'].round(2)
print(df_air_display.to_markdown(index=False))

print("\n--- TABLE 2: Spearman’s Rank Correlation (Rho) Results (2006–2019) ---")
df_corr_output = df_corr_results[['Correlation Pair', 'Spearman_rho', 'P_value', 'Interpretation']].copy()
df_corr_output.columns = ['Correlation Pair', "Spearman's ρ", 'P-value', 'Interpretation']
print(df_corr_output.to_markdown(index=False))

print("\n--- TABLE 4: Pandemic Spike Comparison (2019–2021) ---")
print(df_pandemic_display.to_markdown(index=False))
print(f"\nTotal Change (2019-2021):")
print(f"-> NPC Suicidal Cases (Attempts): +{total_change_npc:.1f}%")
print(f"-> DOSM Fatalities (Deaths): +{total_change_dosm:.1f}%")

print("\n--- Figure Generation Status ---")
print("Figure 1 (Time Series) saved to: Figure_1_Time_Series_Comparison.png")
print("Figure 2 (SLR Plot) saved to: Figure_2_SLR_Plot.png")
print("="*80)
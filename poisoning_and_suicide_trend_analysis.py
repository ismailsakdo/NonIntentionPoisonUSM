# -*- coding: utf-8 -*-
"""Poisoning and Suicide Trend Analysis

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mbP6goKoeZuijKeQimoSi--4-1fSY5yi
"""

import pandas as pd
import numpy as np
from scipy.stats import spearmanr

# ==============================================================================
# 1. DATA DEFINITION
# Data is hardcoded based on the final manuscript tables (Table 1, 2, 3, and 4)
# Note: The SMR values are derived from the referenced paper (Lew et al., 2022).
# ==============================================================================

data = {
    'Year': np.arange(2006, 2022),
    'Population': [
        26417909, 26998389, 27570059, 28124778, 28655776, 29162039,
        29662831, 30174265, 30696137, 31232798, 31789685, 32355644,
        32910967, 33440596, 33700000, 34000000  # Approximated post-2019 for AIR calc
    ],
    # NPC Suicidal Case Counts (Intentional Poisoning)
    'NPC_Suicidal_Total': [
        567, 702, 745, 778, 926, 948, 1009, 1114, 1123, 1263, 1146,
        1190, 1200, 1332, 1450, 1586
    ],
    # Published Age-Standardized SMR (per 100k) from Lew et al., 2022 (2006-2019 only)
    'SMR_Overall': [
        4.3, 4.7, 4.9, 5.2, 5.3, 5.5, 5.8, 6.0, 6.1, 6.2, 6.3, 6.4, 6.5, 6.6,
        np.nan, np.nan # NaN for years outside the correlation period (2020-2021)
    ],
    'SMR_Male': [
        6.5, 7.1, 7.5, 7.9, 8.1, 8.5, 9.1, 9.4, 9.6, 9.8, 10.0, 10.2, 10.4, 10.6,
        np.nan, np.nan
    ],
    'SMR_Female': [
        2.0, 2.3, 2.3, 2.5, 2.5, 2.5, 2.6, 2.7, 2.7, 2.7, 2.8, 2.8, 2.8, 2.9,
        np.nan, np.nan
    ],
    # DOSM Suicide Fatalities (used for pandemic comparison)
    'DOSM_Fatalities': [
        np.nan] * 13 + [609, 631, 1142]
}

df = pd.DataFrame(data)

# --- Define the correlation period (2006-2019) ---
df_corr = df.iloc[:14].copy()

# ==============================================================================
# 2. RATE CALCULATION (NPC Annual Incidence Rate - AIR)
# ==============================================================================

df['NPC_AIR'] = (df['NPC_Suicidal_Total'] / df['Population']) * 100000

# ==============================================================================
# 3. AGE GROUP PROPORTIONAL ESTIMATION (For correlation testing)
# We use the established overall distribution percentages to estimate yearly counts
# for the correlation analysis, as per the methodology.
# Distribution (from Table 3): 20-74 years = 63.4%; 15-19 years = 22.8%
# ==============================================================================

df_corr['NPC_20_74_YRS'] = (df_corr['NPC_Suicidal_Total'] * 0.634).round(0).astype(int)
df_corr['NPC_15_19_YRS'] = (df_corr['NPC_Suicidal_Total'] * 0.228).round(0).astype(int)

# ==============================================================================
# 4. CORRELATION ANALYSIS (Spearman's Rho)
# ==============================================================================

correlation_results = {}

# Define correlation pairs
corr_pairs = {
    'NPC AIR vs. SMR (Both Sexes)': (df_corr['NPC_AIR'], df_corr['SMR_Overall']),
    'NPC AIR vs. SMR (Male Trend)': (df_corr['NPC_AIR'], df_corr['SMR_Male']),
    'NPC AIR vs. SMR (Female Trend)': (df_corr['NPC_AIR'], df_corr['SMR_Female']),
    'NPC 20-74 YRS vs. SMR (Overall)': (df_corr['NPC_20_74_YRS'], df_corr['SMR_Overall']),
    'NPC 15-19 YRS vs. SMR (Overall)': (df_corr['NPC_15_19_YRS'], df_corr['SMR_Overall'])
}

# Run Spearman's Correlation
for name, (data1, data2) in corr_pairs.items():
    rho, p_value = spearmanr(data1, data2)
    # Determine interpretation based on rho value
    if abs(rho) >= 0.8:
        interpretation = 'Very Strong Positive Correlation'
    elif abs(rho) >= 0.6:
        interpretation = 'Strong Positive Correlation'
    elif abs(rho) >= 0.4:
        interpretation = 'Moderate Positive Correlation'
    else:
        interpretation = 'No Significant Correlation'

    # Adjust interpretation for Female Trend based on p-value
    if name == 'NPC AIR vs. SMR (Female Trend)' and p_value > 0.05:
        interpretation = 'No Significant Correlation'

    correlation_results[name] = {
        'rho': rho,
        'p_value': p_value,
        'Interpretation': interpretation
    }

df_corr_results = pd.DataFrame.from_dict(correlation_results, orient='index')
df_corr_results = df_corr_results.reset_index().rename(columns={'index': 'Correlation Pair'})
df_corr_results['Spearman_rho'] = df_corr_results['rho'].round(4)
df_corr_results['P_value'] = df_corr_results['p_value'].round(4)

# ==============================================================================
# 5. AGE GROUP DISTRIBUTION ANALYSIS (Table 3)
# Data is aggregated based on the 2006-2024 total (17,170 cases)
# ==============================================================================

# Hardcoded data from Table 3 of the manuscript
age_data = {
    'Categories of Age': ['20–74 years', '15–19 years', '5–14 years', '< 5 years (Combined)', '> 74 years', 'Total'],
    'Total Suicidal Cases (Count)': [10875, 3921, 1844, 415, 115, 17170]
}
df_age = pd.DataFrame(age_data)
total_cases = df_age['Total Suicidal Cases (Count)'].iloc[-1]
df_age['Percentage of Total'] = (df_age['Total Suicidal Cases (Count)'] / total_cases * 100).round(1).astype(str) + '%'

# ==============================================================================
# 6. PANDEMIC SPIKE COMPARISON (Table 4)
# ==============================================================================

df_pandemic = df[df['Year'].isin([2019, 2020, 2021])].copy()

# Calculate Annual Percentage Change (YoY)
df_pandemic['Annual Change NPC (YoY)'] = df_pandemic['NPC_Suicidal_Total'].pct_change() * 100
df_pandemic['Annual Change DOSM (YoY)'] = df_pandemic['DOSM_Fatalities'].pct_change() * 100

# Calculate Total Change (2019-2021)
npc_2019 = df_pandemic.loc[df_pandemic['Year'] == 2019, 'NPC_Suicidal_Total'].values[0]
npc_2021 = df_pandemic.loc[df_pandemic['Year'] == 2021, 'NPC_Suicidal_Total'].values[0]
dosm_2019 = df_pandemic.loc[df_pandemic['Year'] == 2019, 'DOSM_Fatalities'].values[0]
dosm_2021 = df_pandemic.loc[df_pandemic['Year'] == 2021, 'DOSM_Fatalities'].values[0]

total_change_npc = ((npc_2021 - npc_2019) / npc_2019) * 100
total_change_dosm = ((dosm_2021 - dosm_2019) / dosm_2019) * 100

# Format the pandemic results for display
df_pandemic_display = df_pandemic[['Year', 'NPC_Suicidal_Total', 'Annual Change NPC (YoY)', 'DOSM_Fatalities', 'Annual Change DOSM (YoY)']].copy()
df_pandemic_display['Annual Change NPC (YoY)'] = df_pandemic_display['Annual Change NPC (YoY)'].apply(lambda x: f'+{x:.1f}%' if pd.notna(x) else 'N/A')
df_pandemic_display['Annual Change DOSM (YoY)'] = df_pandemic_display['Annual Change DOSM (YoY)'].apply(lambda x: f'+{x:.1f}%' if pd.notna(x) else 'N/A')
df_pandemic_display = df_pandemic_display.rename(columns={
    'NPC_Suicidal_Total': 'NPC Cases (Attempts)',
    'DOSM_Fatalities': 'DOSM Fatalities (Deaths)'
}

# ==============================================================================
# 7. PRINT FINAL RESULTS
# ==============================================================================

print("==============================================================================")
print("             NON-FATAL POISONING AND SUICIDE TREND ANALYSIS")
print("==============================================================================")

# --- Table 1: Annual Incidence Rate (AIR) ---
print("\n--- TABLE 1: NPC Suicidal Cases Annual Incidence Rate (2006–2019) ---")
df_air_display = df_corr[['Year', 'Population', 'NPC_Suicidal_Total', 'NPC_AIR']].copy()
df_air_display.columns = ['Year', 'Population', 'NPC Suicidal Count', 'NPC Suicidal AIR (per 100k)']
df_air_display['Population'] = df_air_display['Population'].apply(lambda x: f'{x:,.0f}')
df_air_display['NPC Suicidal AIR (per 100k)'] = df_air_display['NPC Suicidal AIR (per 100k)'].round(2)
print(df_air_display.to_markdown(index=False))

# --- Table 2: Spearman's Rank Correlation ---
print("\n--- TABLE 2: Spearman’s Rank Correlation (Rho) Results (2006–2019) ---")
df_corr_output = df_corr_results[['Correlation Pair', 'Spearman_rho', 'P_value', 'Interpretation']].copy()
# Filtering for the main manuscript correlations (excluding the age group specific for a clean Table 2)
df_corr_output_main = df_corr_output.iloc[:3]
df_corr_output_main.columns = ['Correlation Pair', "Spearman's $\\rho$", 'P-value', 'Interpretation']
print(df_corr_output_main.to_markdown(index=False))

# --- Age Group Correlation Details (Supporting Data) ---
print("\n--- SUPPORTING DATA: Age-Specific Correlation vs. SMR Overall (2006–2019) ---")
df_corr_output_age = df_corr_output.iloc[3:]
df_corr_output_age.columns = ['Correlation Pair', "Spearman's $\\rho$", 'P-value', 'Interpretation']
print(df_corr_output_age.to_markdown(index=False))


# --- Table 3: Age Group Distribution ---
print("\n--- TABLE 3: Age Group Distribution for NPC Suicidal Cases (2006–2024) ---")
print(df_age.to_markdown(index=False))

# --- Table 4: Pandemic Spike Comparison ---
print("\n--- TABLE 4: Pandemic Spike Comparison (2019–2021) ---")
print(df_pandemic_display.to_markdown(index=False))
print(f"\nTotal Change (2019-2021):")
print(f"-> NPC Suicidal Cases (Attempts): +{total_change_npc:.1f}%")
print(f"-> DOSM Fatalities (Deaths): +{total_change_dosm:.1f}%")
print("\n==============================================================================")